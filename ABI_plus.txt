+cyclus::Agent::version()
+cyclus::Composition::Decay(int, unsigned long)
+cyclus::Context::AddPrototype(std::string, cyclus::Agent*, bool)
+cyclus::DepricationError::~DepricationError()
+cyclus::Env::allow_milps()
+cyclus::ExchangeSolver::Cost(cyclus::Arc const&, bool)
+cyclus::ExchangeSolver::PseudoCostByCap(double)
+cyclus::ExchangeSolver::PseudoCostByPref(double)
+cyclus::GetTraderPrototype(cyclus::Trader*)
+cyclus::GetTraderSpec(cyclus::Trader*)
+cyclus::Hdf5Back::Close()
+cyclus::Material::DecayHeat()
+cyclus::MockSim::MockSim(int)
+cyclus::ProgSolver::ProgSolver(std::string)
+cyclus::ProgSolver::ProgSolver(std::string, double)
+cyclus::ProgSolver::ProgSolver(std::string, double, bool, bool, bool)
+cyclus::ProgSolver::WriteMPS()
+cyclus::ProgTranslator::CheckPref(double)
+cyclus::ProgTranslatorContext::~ProgTranslatorContext()
+cyclus::QueryResult::operator=(cyclus::QueryResult&&)
+cyclus::ResourceExchange<cyclus::Material>::InitTraders()
+cyclus::ResourceExchange<cyclus::Product>::InitTraders()
+cyclus::SimInit::LoadCoinSolver(bool, std::set<std::string, std::less<std::string>, std::allocator<std::string> >)
+cyclus::SqliteBack::Close()
+cyclus::Timer::RecordInventories(cyclus::Agent*)
+cyclus::Timer::RecordInventory(cyclus::Agent*, std::string, boost::shared_ptr<cyclus::Material>)
+cyclus::cy_eps
+cyclus::cy_eps_rsrc
